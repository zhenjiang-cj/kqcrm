<?xml version="1.0" encoding="GBK"?>
<!DOCTYPE sqlMap 	
PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" 
"http://www.ibatis.com/dtd/sql-map-2.dtd">
<sqlMap namespace="UserSql">
	<typeAlias alias="user" type="com.nl.portal.dt.UserInfo"/>
	
	<select id='queryUser' parameterClass="java.util.HashMap" resultClass="user" >
        select *
		  from (select a.*, row_number() over(order by a.sno) rn, count(*) over() totalCount
		          from (
		          select a.sno,a.user_id,a.user_name,a.msisdn,a.email from kq_isc_user a where is_valid =1 
		           <dynamic>
					<isNotEmpty property="user_name">
							and a.user_name  like '%$user_name$%'
					</isNotEmpty>
				  </dynamic>         
		                   ) a) t
		 where t.rn>(#page_num#-1)*#page_size# and #page_num#*#page_size# >= t.rn
	</select>
	
	
	<select id="getSno" resultClass="java.lang.String">
		select seq_value from kq_seq_sno_srl
	</select>
	
	<update id="addSno" parameterClass="java.util.HashMap">
	    update kq_seq_sno_srl 
		   set seq_value = seq_value+1 
	</update>
	
	<select id="getRole" resultClass="java.lang.String">
		select seq_value from kq_seq_role_srl
	</select>
	
	<update id="addRole" parameterClass="java.util.HashMap">
	    update kq_seq_role_srl 
		   set seq_value = seq_value+1 
	</update>
	
	
	<select id='getCityByPro' parameterClass="java.util.HashMap" resultClass="user" >
        with cte_child(org_id,parent_org_id,org_name,data_level )
			as
			(
			   select org_id ,parent_org_id,org_name,data_level
			    from kq_region_relation 
			    where  (   
				 org_id = #provinces#
				  
			    )
			    union all
			    select a.org_id ,a.parent_org_id,a.org_name,a.data_level
			    from kq_region_relation a, cte_child b
			    where a.parent_org_id=b.org_id
			)  
			select * from cte_child where  data_level = 3
			order by data_level,org_id
	</select>
	<select id='getRegionByCity' parameterClass="java.util.HashMap" resultClass="user" >
        with cte_child(org_id,parent_org_id,org_name,data_level )
			as
			(
			   select org_id ,parent_org_id,org_name,data_level
			    from kq_region_relation 
			    where  (   
				 org_id = #city#
				  
			    )
			    union all
			    select a.org_id ,a.parent_org_id,a.org_name,a.data_level
			    from kq_region_relation a, cte_child b
			    where a.parent_org_id=b.org_id
			)  
			select * from cte_child where  data_level = 4
			order by data_level,org_id
	</select>
	
	<insert id="doUserAdd" parameterClass="java.util.HashMap">
		
		insert into kq_isc_user
		( 
			sno,
			user_id,
			user_name,
			user_pswd,
			msisdn,
			email,
			is_valid

		)
		values
		(   #sno#,
			#user_id#,
			#user_name#,
			#user_pswd#,
			#msisdn#,
			#email#,
			1
		)
		
	</insert>
	<insert id="doUserRegionAdd" parameterClass="java.util.HashMap">
		
		insert into kq_user_region
		( 
			sno,
			org_level,
			provinces,
			city,
			region 

		)
		values
		(   #sno#,
			#level#,
			#provinces#,
			#city#,
			#region# 
		)
		
	</insert>
	<insert id="doUserRegionAdd1" parameterClass="java.util.HashMap">
		
		insert into kq_user_region
		( 
			sno,
			region 

		)
		values
		(   #sno#,
			#region# 
		)
		
	</insert>
	
	<update id="doUserDel" parameterClass="java.util.HashMap">
	  UPDATE kq_isc_user set is_valid=0 where is_valid =1 and sno = #sno#
	</update>
	
	
	<select id='queryUserListBysno' parameterClass="java.util.HashMap" resultClass="user" >
        select *
		  from (select a.*, row_number() over(order by a.sno) rn, count(*) over() totalCount
		          from (
		          select a.sno,a.user_id,a.user_name,a.msisdn,a.email ,
		          		 b.org_level,b.provinces,b.city,b.region
		          from kq_isc_user a
		          LEFT JOIN  kq_user_region b on a.sno = b.sno 
		           where a.is_valid =1  
		           <dynamic>
					<isNotEmpty property="sno">
							and a.sno =  #sno#
					</isNotEmpty>
				  </dynamic>         
		                   ) a) t 
	</select>
	
	<update id="doUserEdit" parameterClass="java.util.HashMap">
	  UPDATE kq_isc_user 
	  set user_name=#user_name# ,
		  msisdn = #msisdn#,
		  email = #email#
	  where is_valid =1 
	  and sno = #sno#
	</update>
	
	<select id='doUserRegioncheck' parameterClass="java.util.HashMap" resultClass="user" >
        select *  from kq_user_region a where sno =#sno# 
	</select>
	
	<update id="doUserRegionEdit" parameterClass="java.util.HashMap">
	  UPDATE kq_user_region 
	  set org_level=#level#,
			provinces=#provinces#,
			city=#city#,
			region=#region# 
	  where  sno = #sno#
	</update>
	<update id="doUserRegionEdit1" parameterClass="java.util.HashMap">
	  UPDATE kq_user_region 
	  set   region=#region# 
	  where  sno = #sno#
	</update>
	
	<select id='queryAllRole' parameterClass="java.util.HashMap" resultClass="user" >
        select a.ROLE_ID,a.ROLE_NAME,a.REMARK,a.SYSID from kq_isc_role a where ENFLAG=1 
	</select>
	<select id='queryAllRolebysno' parameterClass="java.util.HashMap" resultClass="user" >
        select a.ROLE_ID,a.ROLE_NAME,a.REMARK,a.SYSID from kq_isc_role a 
        where ENFLAG=1 
        and not exists (select 1 from kq_ISC_USER_ROLE b where a.ROLE_ID=b.ROLE_ID and b.SNO=#sno#)
	</select>
	
	<select id='queryRoleByUser' parameterClass="java.util.HashMap" resultClass="user" >
        select a.ROLE_ID,a.ROLE_NAME,a.REMARK,a.SYSID from kq_isc_role a,kq_isc_user_role b 
        where a.ENFLAG=1 
        and a.role_id =b.role_id
        and b.sno =#sno#
	</select>
	
	<update id="delUserRole" parameterClass="java.util.HashMap">
	  delete kq_isc_user_role where sno = #sno#  
	</update>
	
	<insert id="addUserRole" parameterClass="java.util.HashMap">
		
		insert into kq_isc_user_role
		( 
			sno,
			role_id 

		)
		values
		(   #sno#,
			#role_id# 
		)
		
	</insert>
	<select id='queryRole' parameterClass="java.util.HashMap" resultClass="user" >
       select *
		  from (select a.*, row_number() over(order by a.role_id) rn, count(*) over() totalCount
		          from (
		          select a.role_id,a.role_name,a.remark as role_remark,a.sysid from kq_isc_role a where enflag =1 
		           <dynamic>
					<isNotEmpty property="role_name">
							and a.role_name   like '%$role_name$%'
					</isNotEmpty>
				  </dynamic>         
		                   ) a) t
		 where t.rn>(#page_num#-1)*#page_size# and #page_num#*#page_size# >= t.rn
	</select>
	<select id='queryRoleList' parameterClass="java.util.HashMap" resultClass="user" >
	          select a.role_id,a.role_name,a.remark as role_remark,a.sysid 
	          from kq_isc_role a 
	          where enflag =1 
	            and role_id = #role_id#
	</select>
	
	
	 <select id="queryAllprivilege" parameterClass="java.util.HashMap" resultClass="user">
		  
		with cte_child(privilege_id,privilege_name,parent_id,sysid )
			as
			(
			   select t.privilege_id,t.privilege_name, t.parent_id,t.sysid
			    from kq_isc_privilege t
			    where  t.status =1
			     <dynamic>
					<isNotEmpty property="sysid">
						<isNotEqual property="sysid" compareValue="-1">
							and t.sysid =#sysid#
						</isNotEqual>
					</isNotEmpty>
				  </dynamic>  
			      
			    union all
			    select a.privilege_id ,a.privilege_name,a.parent_id,a.sysid
			    from kq_isc_privilege a, cte_child b
			    where a.parent_id=b.privilege_id
			)  
			select distinct * from cte_child where  1=1
			order by privilege_id,sysid
	</select>
	
	<insert id="doRoleAdd" parameterClass="java.util.HashMap">
		
		insert into kq_isc_role
		( 
			role_id,
			role_name,
			remark,
			enflag,
			createid,
			createtime,
			sysid
		)
		values
		(    
			#role_id#,
			#role_name#,
			#role_remark#,
			1,
			#create_id#,
			GETDATE(),
			#sysid# 
		)
		
	</insert>
	
	<insert id="addRolePriv" parameterClass="java.util.HashMap">
		
		insert into kq_ISC_ROLE_PRIVILEGE
		( 
			role_id,
			privilege_id
		)
		values
		(    
			#role_id#,
			#priv_id#
		)
		
	</insert>
	
	<update id="doRoleDel" parameterClass="java.util.HashMap">
	  UPDATE kq_isc_role 
	  set enflag=0, 
	  where enflag =1 
	  and role_id = #role_id#
	</update>
	
	 <select id="getPrivilegeByRoleid" parameterClass="java.util.HashMap" resultClass="user">
		 select role_id,privilege_id from kq_ISC_ROLE_PRIVILEGE a 
		 where role_id = #role_id#
	</select>
	
	<update id="doRoleEdit" parameterClass="java.util.HashMap">
	  UPDATE kq_isc_role 
	    set role_name=#role_name#,
			remark=#role_remark#,
			sysid=#sysid# 
	  where enflag =1 
	  and role_id = #role_id#
	</update>
	
	<update id="delRolePriv" parameterClass="java.util.HashMap">
	  delete kq_ISC_ROLE_PRIVILEGE
	  where   role_id = #role_id#
	</update> 
	
	
	 <select id="queryAllRegion" parameterClass="java.util.HashMap" resultClass="user">
		  
		with cte_child(org_id,org_name,parent_org_id,data_level )
			as
			(
			   select t.org_id,t.org_name, t.parent_org_id,t.data_level
			    from kq_region_relation t
			    where  org_id=1
			    union all
			    select a.org_id ,a.org_name,a.parent_org_id,a.data_level
			    from kq_region_relation a, cte_child b
			    where a.parent_org_id=b.org_id
			)  
			select distinct * from cte_child where  1=1
			order by org_id,data_level
	</select>
	 <select id="getRegionByUser" parameterClass="java.util.HashMap" resultClass="user">
		  
		select sno,region from kq_user_region a where sno = #sno#
	</select>
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
</sqlMap>