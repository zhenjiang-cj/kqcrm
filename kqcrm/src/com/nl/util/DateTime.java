/* Generated by Together */

package com.nl.util;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

import org.apache.log4j.Logger;

/**
 * Title:处理时间的类包装
 * Description:处理时间，如时间分隔，时间类型转换等功能。本类的所有方法都是静态类方法。所以在使用的时候可以不必生成该类实例
 * @author 林光
 * @version 1.0
 */
public class DateTime {

    private static final Logger logger = Logger.getLogger(DateTime.class);
    
    /**
     * 紧凑日期型格式
     */
    public static final String YYYYMMDDHHMISS = "yyyyMMddHHmmss";
    /**
     *  日期型格式YYYY-MM-DD
     */
    public static final String YYYY_MM_DD = "yyyy-MM-dd";
    /**
     *  日期型格式YYYY-MM
     */
    public static final String YYYY_MM = "yyyy-MM";
    /**
     *  日期型格式DD
     */
    public static final String DD = "dd";

    /**
     *  日期型格式MM-DD
     */
    public static final String MM_DD = "MM-dd";
    /**
     * 日期型格式YYYYMMDD
     */
    public static final String YYYYMMDD = "yyyyMMdd";
    /**
     * 标准日期型格式YYYY-MM-DD HH24:MI:SS
     */
    public static final String YYYY_MM_DD_HH_MI_SS = "yyyy-MM-dd HH:mm:ss";

    /**
     * 标准日期型格式YYYY/MM/DD HH24:MI:SS
     */
    public static final String YYYY_MM_DD_HH_MI_SS_FLAG = "yyyy/MM/dd HH:mm:ss";

    /**
     * 标准日期型格式YYYY/MM/DD
     */
    public static final String YYYY_MM_DD_FLAG = "yyyy/MM/dd";

    private static String[] ParseDate(Date dDate) {
        try {
            String[] aResult = new String[7];
            java.util.Calendar ca = java.util.Calendar.getInstance();
            ca.setTime(dDate);

            aResult[0] = Integer.toString(ca.get(ca.YEAR));
            aResult[1] = Integer.toString(ca.get(ca.MONTH) + 1);
            aResult[2] = Integer.toString(ca.get(ca.DATE));
            aResult[3] = Integer.toString(ca.get(ca.HOUR_OF_DAY));
            aResult[4] = Integer.toString(ca.get(ca.MINUTE));
            aResult[5] = Integer.toString(ca.get(ca.SECOND));
            aResult[6] = Integer.toString(ca.get(ca.YEAR) + 1);
            if (aResult[1].length() == 1) {
                aResult[1] = "0" + aResult[1];
            }
            if (aResult[2].length() == 1) {
                aResult[2] = "0" + aResult[2];
            }
            if (aResult[3].length() == 1) {
                aResult[3] = "0" + aResult[3];
            }
            if (aResult[4].length() == 1) {
                aResult[4] = "0" + aResult[4];
            }
            if (aResult[5].length() == 1) {
                aResult[5] = "0" + aResult[5];
            }
            return aResult;
        } catch (Exception ex) {
            return null;
        }

    }

    /**
     *提供时间的分解
     *@param sDateStr 提供符合规定的时间字符串
     *(如:2000.01.15 20:15:18或2000/01/15 20:15:18或2000-01-01 20:15:18))
     *@param iHouses 与sDateStr所表示的时间差(按小时计)
     *@return String数组对象([0]:年 ; [1]:月 ; [2]:日 ; [3]:时 ;[4]:分 [5]:秒
              [6]:+1年)
     *        出现异常返回null
     */
    public static String[] getDateMsg(String sDateStr, int iHours) {
        try {
            sDateStr = sDateStr.replace('.', '/');
            sDateStr = sDateStr.replace('-', '/');

            java.text.SimpleDateFormat df = new java.text.SimpleDateFormat(
                    "yyyy/MM/dd HH:mm:ss");
            Date dDate = df.parse(sDateStr);
            if (iHours != 0) {
                long iNowDate = dDate.getTime();
                long iNewDate = iNowDate + (long) (iHours) * 60 * 60 * 1000;
                dDate = new Date(iNewDate);
            }
            return ParseDate(dDate);
        } catch (Exception ex) {
            return null;
        }
    }

    /**
     *提供时间的分解
     *@param dDate 时间日期对象实例
     *@param iHouses 与dDate所表示的时间差(按小时计)
     *@return String数组对象([0]:年 ; [1]:月 ; [2]:日 ; [3]:时 ;[4]:分 [5]:秒
              [6]:+1年))
     *        出现异常返回null
     */
    public static String[] getDateMsg(Date dDate, int iHours) {
        try {
            if (iHours != 0) {
                long iNowDate = dDate.getTime();
                long iNewDate = iNowDate + (long) (iHours) * 60 * 60 * 1000;
                dDate = new Date(iNewDate);
            }
            return ParseDate(dDate);
        } catch (Exception ex) {
            return null;
        }
    }

    /**
     * 内部方法，判断当前日期字符串是否为完全日期时间，
     * 并以1900年1月1日 0:00:00为基准校正为一个日期对象。
     * @param 表示日期时间的字符串；
     * @return 日期型数值。
     */
    public static Date getDate(String sDateTime) {
        try {
            if (sDateTime == null) {
                return null;
            }
            sDateTime = sDateTime.replace('.', '/');
            sDateTime = sDateTime.replace('-', '/');
            if (sDateTime.indexOf("/") == -1) {
                //没有日期段。
                sDateTime = "1900/1/1 " + sDateTime;
            }
            if (sDateTime.indexOf(":") == -1) {
                //没有时间段
                sDateTime = sDateTime + " 0:0:0";
            }
            java.text.SimpleDateFormat df = new java.text.SimpleDateFormat(
                    "yyyy/MM/dd HH:mm:ss");
            return df.parse(sDateTime);
        } catch (Exception ex) {
            return null;
        }
    }

    /**
     * 根据输入的紧凑日期时间字符串（14位日期时间、8位日期、6位时间），
     * 取客户端能接受的/:分隔的日期时间值。
     * @param 表示日期时间的14位紧凑格式字符串；8位日期或6位时间紧凑型字符串。
     * @return 能被客户端datetime.htc接受日期时间字符串。对于单纯日期或单纯时间
     * 的类型，不在服务器端进行修正，而传递准确的日期和时间值。客户端的datetime控件应当自行修正。
     */
    public static String getDateTimeValue(String sDateTime) {
        try {
            int iLength = sDateTime.length();
            String sDateTimeValue = null;
            if (iLength == 14) {
                sDateTimeValue = sDateTime.substring(0, 4) + "/"
                                 + sDateTime.substring(4, 6) + "/"
                                 + sDateTime.substring(6, 8) + " "
                                 + sDateTime.substring(8, 10) + ":"
                                 + sDateTime.substring(10, 12) + ":"
                                 + sDateTime.substring(12, 14);
            }
            if (iLength == 8) {
                sDateTimeValue = sDateTime.substring(0, 4) + "/"
                                 + sDateTime.substring(4, 6) + "/"
                                 + sDateTime.substring(6, 8);
            }
            if (iLength == 6) {
                sDateTimeValue = sDateTime.substring(0, 2) + ":"
                                 + sDateTime.substring(2, 4) + ":"
                                 + sDateTime.substring(4, 6);
            }
            return sDateTimeValue;
        } catch (Exception ex) {
            return sDateTime;
        }
    }

    /**
     * 根据输入的日期时间值，取14位紧凑型日期时间。
     * @param 表示日期时间的字符串。
     * @return 14位紧凑型日期时间字符串。
     */
    public static String getDateTimeString(String sDateTime) {
        try {
            String[] aDateString = getDateMsg(getDate(sDateTime), 0);
            return aDateString[0] + aDateString[1] + aDateString[2]
                    + aDateString[3] + aDateString[4] + aDateString[5];
        } catch (Exception ex) {
            return sDateTime;
        }
    }

    /**
     * 根据输入的日期时间值，取8位紧凑型日期。
     * @param 表示日期时间的字符串。
     * @return 8位紧凑型日期字符串。
     */
    public static String getDateString(String sDateTime) {
        try {
            String[] aDateString = getDateMsg(getDate(sDateTime), 0);
            return aDateString[0] + aDateString[1] + aDateString[2];
        } catch (Exception ex) {
            return sDateTime;
        }
    }

    /**
     * 根据输入的日期时间值，取6位紧凑型时间。
     * @param 表示日期时间的字符串。
     * @return 6位紧凑型时间字符串。
     */
    public static String getTimeString(String sDateTime) {
        try {
            String[] aDateString = getDateMsg(getDate(sDateTime), 0);
            return aDateString[3] + aDateString[4] + aDateString[5];
        } catch (Exception ex) {
            return sDateTime;
        }
    }

    /**
     *取当前系统时间
     *@param 无
     *@return Date对象(出现异常返回null)
     */
    public static Date getDate() {
        try {
            Date dDate = new Date();
            return dDate;
        } catch (Exception ex) {
            return null;
        }
    }

    /**
     * 将某个字符串转成标准时间对象 格式举例yyyyMMddHHmmss
     * @param sFormat
     * @param sTimeStr
     * @return
     */
    public static java.util.Date getStandDate(String sFormat, String sTimeStr) {
        try {
            java.text.SimpleDateFormat df = new java.text.SimpleDateFormat(
                    sFormat);
            return df.parse(sTimeStr);
        } catch (Exception ex) {
            return null;
        }
    }

    /**
     * 将输入类型的时间字符串直接转成输出格式的时间字符串 格式举例yyyyMMddHHmmss
     * @param sInputFormat
     * @param sInputTime
     * @param sOutputFormat
     * @return
     * huangyl 修改，优化性能
     */
    public static String format(String sInputFormat, String sInputTime,
                                String sOutputFormat) {
        //为空，直接return
        if(sInputTime==null || sInputTime.trim().equals("")) return "";
        sInputTime = sInputTime.trim();
        String sOutput =sOutputFormat;
        try {
            //长度判段
            if (sInputFormat.length() != sInputTime.length()) {
                // 可能存在例如: 2006/5的情况,就用Date类型来中转
                java.util.Date dt = getStandDate(sInputFormat, sInputTime);
                //返回
                return format(sOutputFormat, dt);
            }
            //可优化部分
            //常用几个
            //yyyy-MM-dd
            if(sInputFormat.equals(DateTime.YYYYMMDDHHMISS) && sOutputFormat.equals(DateTime.YYYY_MM_DD)){
                return sInputTime.substring(0,4)+"-"+sInputTime.substring(4,6)+"-"+sInputTime.substring(6,8);
            }
            //yyyy/MM/dd
            if(sInputFormat.equals(DateTime.YYYYMMDDHHMISS) && sOutputFormat.equals(DateTime.YYYY_MM_DD_FLAG)){
                return sInputTime.substring(0,4)+"/"+sInputTime.substring(4,6)+"/"+sInputTime.substring(6,8);
            }
            //yyyy-MM-dd HH:mm:ss
            if(sInputFormat.equals(DateTime.YYYYMMDDHHMISS) && sOutputFormat.equals(DateTime.YYYY_MM_DD_HH_MI_SS)){
                return sInputTime.substring(0,4)+"-"+sInputTime.substring(4,6)+"-"+sInputTime.substring(6,8)+" " +sInputTime.substring(8,10)+":"+sInputTime.substring(10,12)+":"+sInputTime.substring(12,14);
            }
            //yyyy/MM/dd HH:mm:ss
            if(sInputFormat.equals(DateTime.YYYYMMDDHHMISS) && sOutputFormat.equals(DateTime.YYYY_MM_DD_HH_MI_SS_FLAG)){
                return sInputTime.substring(0,4)+"/"+sInputTime.substring(4,6)+"/"+sInputTime.substring(6,8)+" "+sInputTime.substring(8,10)+":"+sInputTime.substring(10,12)+":"+sInputTime.substring(12,14);
            }
            //其他
            //将原来的格式化值写入sFormat数组中;
            String[][] sFormat = { {"yyyy", ""}, {"MM", ""}, {"dd", ""}, {"HH",""}, {"mm", ""}, {"ss", ""}};
            for (int i = 0; i < sFormat.length; i++) {
                int iPos = sInputFormat.indexOf(sFormat[i][0]);
                if (iPos < 0)
                    continue;
                sFormat[i][1] = sInputTime.substring(iPos,
                        iPos + sFormat[i][0].length());
            }
            //填充预制值
            String[] sNewDate = {"2006","01","01","00","00","00"};//ParseDate(getDate());
            //转化格式
            for (int i = 0; i < sFormat.length; i++) {
                if (sFormat[i][1].equals(""))
                    sFormat[i][1] = sNewDate[i];
                if (sOutput.indexOf(sFormat[i][0]) > -1) {
                    sOutput = ExtString.replace(sOutput, sFormat[i][0],
                                                sFormat[i][1]);
                }
            }
            return sOutput;
        } catch (Exception ex) {
            return "";
        }
    }

    /**
     * 获取某个时间对象的指定格式输出字符串 格式举例yyyyMMddHHmmss
     * @param sFormat
     * @param dt
     * @return
     */
    public static String format(String sFormat, java.util.Date dt) {
        java.text.SimpleDateFormat df = new java.text.SimpleDateFormat(sFormat);
        return df.format(dt);
    }

    /**
     * 获取某个时间对象的指定格式出符串
     * @param sFormat
     * @param dt
     * @return
     */
    public static String format(java.util.Date dt) {
        try {
            return format("yyyy/MM/dd HH:mm:ss", dt);
        } catch (Exception ex) {
            return null;
        }
    }

    /**
     * 获取标准时间对象的转成数据库时间对象(短时间)
     * @param sFormat
      @param dt
     * @return
     */
    public static java.sql.Date convertToShort(java.util.Date dt) {
        try {
            return new java.sql.Date(dt.getTime());
        } catch (Exception ex) {
            return null;
        }
    }

    /**
     * 获取标准时间对象的转成数据库时间对象(长时间)
     * @param sFormat
     * @param dt
     * @return
     */
    public static java.sql.Timestamp convertToLong(java.util.Date dt) {
        try {
            return new java.sql.Timestamp(dt.getTime());
        } catch (Exception ex) {
            return null;
        }
    }

    /**
     * 将按指定输入格式的时间字符串转成数据库时间对象(长时间)
     * @param sFormat
     * @param dt
     * @return
     */
    public static java.sql.Timestamp convertToLong(String sInputFormat,
            String sInputTime) {
        try {
            return new java.sql.Timestamp(getStandDate(sInputFormat, sInputTime).
                                          getTime());
        } catch (Exception ex) {
            return null;
        }
    }

    /**
     * 将按yyyyMMddHHmmss输入格式的时间字符串转成数据库时间对象(长时间)
     * @param sFormat
     * @param dt
     * @return
     */
    public static java.sql.Timestamp convertToLong(String sInputTime) {
        try {
            return new java.sql.Timestamp(getStandDate("yyyyMMddHHmmss",
                    sInputTime).
                                          getTime());
        } catch (Exception ex) {
            return null;
        }
    }


    /*
     * 功能描述：获取时间   luojz
     * params iIndex
     *           1:年
     *           2:月
     *           3:日
     *           4:小时
     *           5:分钟
     *           6:秒
     *        iDistance 间隔
     */
    public static String[] getTime(int iIndex, int iDistance) {
        String[] aTemp = {
                         "2002", "07", "02", "10", "10", "10"};
        try {
            Calendar cal = Calendar.getInstance();
            if (iIndex == 1) {
                cal.add(Calendar.YEAR, iDistance);
            } else if (iIndex == 2) {
                cal.add(Calendar.MONTH, iDistance);
            } else if (iIndex == 3) {
                cal.add(Calendar.DAY_OF_MONTH, iDistance);
            } else if (iIndex == 4) {
                cal.add(Calendar.HOUR_OF_DAY, iDistance);
            } else if (iIndex == 5) {
                cal.add(Calendar.MINUTE, iDistance);
            } else if (iIndex == 6) {
                cal.add(Calendar.SECOND, iDistance);
            }
            aTemp[0] = cal.get(Calendar.YEAR) + "";
            aTemp[1] = getFullLength(cal.get(Calendar.MONTH) + 1, 2);
            aTemp[2] = getFullLength(cal.get(Calendar.DAY_OF_MONTH), 2);
            aTemp[3] = getFullLength(cal.get(Calendar.HOUR_OF_DAY), 2);
            aTemp[4] = getFullLength(cal.get(Calendar.MINUTE), 2);
            aTemp[5] = getFullLength(cal.get(Calendar.SECOND), 2);
        } catch (Exception e) {
            logger.info(e.toString());
            aTemp[0] = "2002";
            aTemp[1] = "07";
            aTemp[2] = "02";
            aTemp[3] = "02";
            aTemp[4] = "02";
            aTemp[5] = "02";
        }
        return aTemp;
    }

    /**
     * 函数功能：在一个整数前面补给定个数零  luojz
     * params：iOral : 原来的数
     *         iLength : 补充为几位
     * return：补了一些零后使之达到一个个数（前补零）
     */
    public static String getFullLength(int iOral, int iLength) {
        int iIndex = ("" + iOral).length();
        if (iIndex > iLength) {
            return "" + iOral;
        }
        String sTemp = "" + iOral;
        for (int i = 0; i < iLength - iIndex; i++) {
            sTemp = "0" + sTemp;
        }
        return sTemp;
    }

    /*
     * 功能描述：获取时间
     * params iIndex
     *           1:年
     *           2:月
     *           3:日
     *           4:小时
     *           5:分钟
     *           6:秒
     *        iDistance 间隔
     String year,String month,String day,String hour,String minute,String second
          分别为年、月、日、小时、分、妙
     */
    public static String[] getTime(int iIndex, int iDistance, String year,
                                   String month, String day, String hour,
                                   String minute, String second) {
        String[] aTemp = {
                         "2002", "07", "02", "10", "10", "10"};
        try {
            Calendar cal = Calendar.getInstance();
            //------------------------------------
            cal.set(Calendar.YEAR, Integer.parseInt(year));
            cal.set(Calendar.MONTH, Integer.parseInt(month) - 1);
            cal.set(Calendar.DAY_OF_MONTH, Integer.parseInt(day));
            cal.set(Calendar.HOUR_OF_DAY, Integer.parseInt(hour));
            cal.set(Calendar.MINUTE, Integer.parseInt(minute));
            cal.set(Calendar.SECOND, Integer.parseInt(second));
            //------------------------------------
            if (iIndex == 1) {
                cal.add(Calendar.YEAR, iDistance);
            } else if (iIndex == 2) {
                cal.add(Calendar.MONTH, iDistance);
            } else if (iIndex == 3) {
                cal.add(Calendar.DAY_OF_MONTH, iDistance);
            } else if (iIndex == 4) {
                cal.add(Calendar.HOUR_OF_DAY, iDistance);
            } else if (iIndex == 5) {
                cal.add(Calendar.MINUTE, iDistance);
            } else if (iIndex == 6) {
                cal.add(Calendar.SECOND, iDistance);
            }
            aTemp[0] = cal.get(Calendar.YEAR) + "";
            aTemp[1] = getFullLength(cal.get(Calendar.MONTH) + 1, 2);
            aTemp[2] = getFullLength(cal.get(Calendar.DAY_OF_MONTH), 2);
            aTemp[3] = getFullLength(cal.get(Calendar.HOUR_OF_DAY), 2);
            aTemp[4] = getFullLength(cal.get(Calendar.MINUTE), 2);
            aTemp[5] = getFullLength(cal.get(Calendar.SECOND), 2);
        } catch (Exception e) {
            logger.info(e.toString());
            aTemp[0] = "2002";
            aTemp[1] = "07";
            aTemp[2] = "02";
            aTemp[3] = "02";
            aTemp[4] = "02";
            aTemp[5] = "02";
        }
        return aTemp;
    }

    /**
     * 计算两个时间对象的差值date1-date2 ,flag=1时 flag=2分 flag=3秒 flag=4毫秒
     * @param date1
     * @param date2
     * @param flag
     * @return
     */
    public static long diffDate(java.util.Date date1, java.util.Date date2,
                                int flag) {
        try {
            long lDiff = date1.getTime() - date2.getTime();
            if (flag == 1) {
                return lDiff / (1000 * 60 * 60);
            }
            if (flag == 2) {
                return lDiff / (1000 * 60);
            }
            if (flag == 3) {
                return lDiff / 1000;
            }
            if (flag == 4) {
                return lDiff;
            }
            return 0;
        } catch (Exception ex) {
            return 0;
        }
    }

    /**
     * 获取给某个时间对象加上特定时间(单位小时)后的值,
     * @param dDate
     * @param iHours
     * @return 紧凑时间类型字符串:yyyyMMddHHmmss
     */
    public static String addDateHour(java.util.Date dDate, int iHours) {
        try {
            if (iHours != 0) {
                long iNowDate = dDate.getTime();
                long iNewDate = iNowDate + (long) (iHours) * 60 * 60 * 1000;
                dDate = new Date(iNewDate);
            }
            return DateTime.format("yyyyMMddHHmmss", dDate);
        } catch (Exception ex) {
            return null;
        }
    }

    /**
     * 获取给某个时间对象加上特定时间(单位小时)后的值,
     * @param dDate
     * @param iHours
     * @return 时间对象
     */
    public static java.util.Date addDate(java.util.Date dDate, int iHours) {
        try {
            if (iHours != 0) {
                long iNowDate = dDate.getTime();
                long iNewDate = iNowDate + (long) (iHours) * 60 * 60 * 1000;
                dDate = new Date(iNewDate);
            }
            return dDate;
        } catch (Exception ex) {
            return null;
        }
    }
    
    /**
     * 获取给某个时间对象加上特定时间(单位天)后的值,
     * @param dDate
     * @param iDays
     * @return 时间对象
     */
    public static String addDays(String dDate, int iDays) {
        try {
        	Calendar c=Calendar.getInstance();
        	SimpleDateFormat sf=new SimpleDateFormat(YYYY_MM_DD);
            if (dDate!=null&&iDays != 0) {
            	Date d=sf.parse(dDate);
            	c.setTime(d);
            	c.add(Calendar.DAY_OF_MONTH, iDays);
            }
            return sf.format(c.getTime());
        } catch (Exception ex) {
            return null;
        }
    }


    /**
     * 获取给某个时间对象加上特定时间(单位小时)后的值,返回值为YYYY/MM/SS HH24:MI:SS
     * @param dDate Date
     * @param iHours int
     * @return String
     */
    public static String add_Date(java.util.Date dDate, int iHours) {
        try {
            dDate = addDate(dDate, iHours);
            return DateTime.format(dDate);
        } catch (Exception ex) {
            return null;
        }
    }

    /**
     * 得到时间字符串(YYYYMMDDHHMISS,YYYYMMDD)时间，支持YYYY_MM_DD_HH_MI_SS_FLAG,YYYY_MM_DD_FLAG与YYYY_MM_DD_HH_MI_SS,YYYY_MM_DD格式的字符串
     * @param sDateTime String
     * @return String
     */
    public static String getStringDate(String sDateTime) {
        String sDate = sDateTime;
        String sInputFormat = "";
        String sOutFormat = "";
        //YYYY_MM_DD_HH_MI_SS_FLAG,YYYY_MM_DD_FLAG
        if (sDateTime.indexOf("/") > -1) {
            if (sDateTime.length() > 10) {
                sInputFormat = YYYY_MM_DD_HH_MI_SS_FLAG;
                sOutFormat = YYYYMMDDHHMISS;
            } else {
                sInputFormat = YYYY_MM_DD_FLAG;
                sOutFormat = YYYYMMDD;
            }
            sDate = format(sInputFormat, sDateTime, sOutFormat);
        }
        //YYYY_MM_DD_HH_MI_SS,YYYY_MM_DD
        if (sDateTime.indexOf("-") > -1) {
            if (sDateTime.length() > 10) {
                sInputFormat = YYYY_MM_DD_HH_MI_SS;
                sOutFormat = YYYYMMDDHHMISS;
            } else {
                sInputFormat = YYYY_MM_DD;
                sOutFormat = YYYYMMDD;
            }
            sDate = format(sInputFormat, sDateTime, sOutFormat);
        }
        return sDate;
    }

    /**
     * 得到Date时间，支持YYYYMMDDHHMISS,YYYYMMDD,YYYY_MM_DD_HH_MI_SS_FLAG,YYYY_MM_DD_FLAG与YYYY_MM_DD_HH_MI_SS,YYYY_MM_DD格式的字符串
     * @param sDateTime String
     * @return String
     */
    public static Date getObjectDate(String sDateTime) {
        Date dt = null;
        String sInputFormat = "";
        //YYYY_MM_DD_HH_MI_SS_FLAG,YYYY_MM_DD_FLAG
        if (sDateTime.indexOf("/") > -1) {
            if (sDateTime.length() > 10) {
                sInputFormat = YYYY_MM_DD_HH_MI_SS_FLAG;
            } else {
                sInputFormat = YYYY_MM_DD_FLAG;
            }
            dt = getStandDate(sInputFormat, sDateTime);
        }
        //YYYY_MM_DD_HH_MI_SS,YYYY_MM_DD
        if (sDateTime.indexOf("-") > -1) {
            if (sDateTime.length() > 10) {
                sInputFormat = YYYY_MM_DD_HH_MI_SS;
            } else {
                sInputFormat = YYYY_MM_DD;
            }
            dt = getStandDate(sInputFormat, sDateTime);
        }
        //YYYYMMDDHHMISS,YYYYMMDD
        if ((sDateTime.length() == 8) || (sDateTime.length() == 14)) {
            if (sDateTime.length() ==14) {
                sInputFormat = YYYYMMDDHHMISS;
            } else {
                sInputFormat = YYYYMMDD;
            }
            dt = getStandDate(sInputFormat, sDateTime);
        }
        return dt;
    }

    /**
     * 得到时间字符串ForOCX(YYYY_MM_DD_HH_MI_SS_FLAG,YYYY_MM_DD_FLAG)时间，支持YYYYMMDDHHMISS,YYYYMMDD与YYYY_MM_DD_HH_MI_SS,YYYY_MM_DD格式的字符串
     * @param sDateTime String
     * @return String
     */
    public static String getStringDateForOCX(String sDateTime) {
        String sDate = sDateTime;
        String sInputFormat = "";
        String sOutFormat = "";

        //YYYY_MM_DD_HH_MI_SS,YYYY_MM_DD
        if (sDateTime.indexOf("-") > -1) {
            if (sDateTime.length() > 10) {
                sInputFormat = YYYY_MM_DD_HH_MI_SS;
                sOutFormat = YYYY_MM_DD_HH_MI_SS_FLAG;
            } else {
                sInputFormat = YYYY_MM_DD;
                sOutFormat = YYYY_MM_DD_FLAG;
            }
            sDate = format(sInputFormat, sDateTime, sOutFormat);
        }
        //YYYYMMDDHHMISS,YYYYMMDD
        if(sDateTime.length()==14 || sDateTime.length()==8){
            if (sDateTime.length()==14) {
                sInputFormat = YYYYMMDDHHMISS;
                sOutFormat = YYYY_MM_DD_HH_MI_SS_FLAG;
            } else if(sDateTime.length()==8){
                sInputFormat = YYYYMMDD;
                sOutFormat = YYYY_MM_DD_FLAG;
            }
            sDate = format(sInputFormat, sDateTime, sOutFormat);
        }
        return sDate;
    }
    public static void main(String args[]){
        logger.info("===============BEGIN=====================");
       // System.out.println(addDates("2014-8-30",2));
        logger.info(""+DateTime.format(DateTime.YYYYMMDDHHMISS,"20060403010101",DateTime.YYYY_MM_DD_HH_MI_SS_FLAG));
        logger.info(""+DateTime.diffDate(DateTime.getDate("2006/4/18 0:2:0"),DateTime.getDate(),2));
        logger.info("===============END=====================");
    }
}
